<!doctype html>
<html lang="fa">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>کدوبلو — بازی چالش‌گو</title>
<style>
  body{font-family:system-ui,-apple-system;direction:rtl;padding:18px;background:#f7f7fb;color:#111}
  h1{font-size:20px;margin:0 0 8px}
  .card{background:#fff;padding:12px;border-radius:10px;box-shadow:0 6px 18px rgba(12,20,60,0.06);margin-bottom:12px}
  input,button,textarea,select{font-size:16px;padding:8px;border-radius:8px;border:1px solid #ddd;width:100%;box-sizing:border-box;margin-top:6px}
  .row{display:flex;gap:8px}
  .row > *{flex:1}
  .small{font-size:13px;color:#555}
  ul{padding-left:18px}
  .controls{display:flex;gap:8px;margin-top:8px;flex-wrap:wrap}
  .btn{cursor:pointer;border:none;padding:10px 12px;border-radius:8px;background:#0b84ff;color:#fff}
  .btn.secondary{background:#e6e9f2;color:#123}
  .center{text-align:center}
  .players-list{display:flex;gap:8px;flex-wrap:wrap;margin-top:8px}
  .pill{background:#eef5ff;padding:6px 10px;border-radius:999px}
  .scoreboard{display:flex;gap:8px;flex-wrap:wrap;margin-top:8px}
  .score{background:#fff8e6;padding:8px;border-radius:8px}
  footer{font-size:12px;color:#666;margin-top:18px;text-align:center}
</style>
</head>
<body>
<h1>کدوبلو — بازی چالش‌گو</h1>

<div class="card">
  <div class="small">۱) بازیکنان (با کاما جدا کن)</div>
  <input id="playersInput" placeholder="مثال: علی, سارا, مهدی" />
  <div class="controls">
    <button id="setPlayers" class="btn">ثبت بازیکنان</button>
    <button id="clearPlayers" class="btn secondary">پاک کردن</button>
  </div>
  <div id="playersArea" class="players-list"></div>
</div>

<div class="card">
  <div class="small">۲) تنظیمات و تعداد راند</div>
  <div class="row">
    <input id="roundsInput" type="number" min="1" value="3" />
    <select id="voiceSelect"></select>
  </div>
  <div class="small">صدا: اگر صدای فارسی یا مناسب ندیدی، از Voice سیستم استفاده کن (تنظیمات آیفون → Siri & Voice → صدای فارسی).</div>
</div>

<div class="card">
  <div class="small">۳) چالش‌ها و تنبیهات (می‌توانی ویرایش کنی)</div>
  <textarea id="chList" rows="4"></textarea>
  <small>هر چالش یک خط — نمونه‌ها از قبل پر شده‌اند.</small>
  <div style="height:8px"></div>
  <textarea id="pList" rows="3"></textarea>
  <small>هر تنبیه یک خط</small>
  <div class="controls">
    <button id="saveLists" class="btn">ذخیره لیست‌ها</button>
    <button id="resetLists" class="btn secondary">برگرداندن به پیش‌فرض</button>
  </div>
</div>

<div class="card center" id="gameCard" style="display:none">
  <div class="small">۴) بازی</div>
  <div id="status" style="margin:8px 0">آماده شروع</div>
  <div class="controls">
    <button id="startBtn" class="btn">شروع بازی</button>
    <button id="nextBtn" class="btn secondary" style="display:none">چالش بعدی</button>
    <button id="endBtn" class="btn secondary" style="display:none">پایان زودهنگام</button>
  </div>

  <div style="margin-top:12px">
    <div id="currentText" style="min-height:54px;font-weight:600"></div>
    <div style="margin-top:8px" class="controls">
      <button id="didBtn" class="btn secondary" style="display:none">انجام شد ✅</button>
      <button id="failBtn" class="btn secondary" style="display:none">انجام نشد ❌</button>
      <button id="speakBtn" class="btn" style="display:none">بات حرف بزنه 🔊</button>
    </div>
  </div>

  <div id="scores" class="scoreboard"></div>
</div>

<footer>تذکر: از تنبیهات خطرناک یا بدون رضایت استفاده نکنید.</footer>

<script>
/* ==== داده‌های پیش‌فرض ==== */
const DEFAULT_CHALLENGES = [
  "۲۰ ثانیه آواز بخون",
  "۱۵ حرکت اسکات یا درجا انجام بده",
  "یک جمله طنز درباره‌ی خودت بگو",
  "یک حقیقت جالب بگو",
  "یک خاطره کوتاه بگو",
  "حدس بزن من چه عددی فکر می‌کنم (1-10)"
];
const DEFAULT_PUNISHMENTS = [
  "یک شعر کوتاه بخون",
  "یک پیام تشکر به دوستی بفرست",
  "یک شکلک بامزه بفرست",
  "یک حقیقت مثبت دربارهٔ خودت بگو",
  "یک عکس خنده‌دار بفرست"
];

let players = [];
let rounds = 3;
let curRound = 0;
let turnIndex = 0;
let scores = {};
let challenges = [];
let punishments = [];
let voice = null;

/* ==== Helpers ==== */
function speak(text){
  if(!('speechSynthesis' in window)){
    alert('مرورگر شما از speechSynthesis پشتیبانی نمی‌کند.');
    return;
  }
  // لازم است صدا با رویداد کاربر آغاز شود — ما کلید "بات حرف بزنه" را داریم
  const ut = new SpeechSynthesisUtterance(text);
  if(voice) ut.voice = voice;
  ut.lang = 'fa-IR';
  speechSynthesis.cancel();
  speechSynthesis.speak(ut);
}
function rand(a){ return a[Math.floor(Math.random()*a.length)]; }
function renderPlayers(){
  const area = document.getElementById('playersArea');
  area.innerHTML = '';
  for(const p of players){
    const d = document.createElement('div');
    d.className = 'pill';
    d.textContent = p;
    area.appendChild(d);
  }
  // show game card if players exist
  document.getElementById('gameCard').style.display = players.length ? 'block' : 'none';
}
function renderLists(){
  document.getElementById('chList').value = challenges.join('\\n');
  document.getElementById('pList').value = punishments.join('\\n');
}
function renderScores(){
  const box = document.getElementById('scores');
  box.innerHTML = '';
  for(const p of players){
    const el = document.createElement('div');
    el.className = 'score';
    el.innerHTML = `<div style="font-weight:700">${p}</div><div class="small">امتیاز: ${scores[p]||0}</div>`;
    box.appendChild(el);
  }
}

/* ==== UI events ==== */
document.getElementById('setPlayers').onclick = ()=>{
  const raw = document.getElementById('playersInput').value;
  players = raw.split(',').map(s=>s.trim()).filter(Boolean);
  players = Array.from(new Set(players)); // یکتا
  players = players.slice(0,10); // محدودیت اختیاری
  if(players.length===0){ alert('حداقل یک بازیکن وارد کنید'); return; }
  rounds = parseInt(document.getElementById('roundsInput').value)||3;
  scores = {};
  for(const p of players) scores[p]=0;
  curRound = 0; turnIndex = 0;
  renderPlayers();
  renderScores();
  document.getElementById('status').textContent = 'آمادهٔ شروع';
};

document.getElementById('clearPlayers').onclick = ()=>{
  document.getElementById('playersInput').value='';
  players=[]; renderPlayers(); scores={}; renderScores();
};

document.getElementById('saveLists').onclick = ()=>{
  challenges = document.getElementById('chList').value.split('\\n').map(s=>s.trim()).filter(Boolean);
  punishments = document.getElementById('pList').value.split('\\n').map(s=>s.trim()).filter(Boolean);
  if(challenges.length===0) challenges = DEFAULT_CHALLENGES.slice();
  if(punishments.length===0) punishments = DEFAULT_PUNISHMENTS.slice();
  localSave();
  alert('لیست‌ها ذخیره شد.');
};

document.getElementById('resetLists').onclick = ()=>{
  challenges = DEFAULT_CHALLENGES.slice();
  punishments = DEFAULT_PUNISHMENTS.slice();
  renderLists();
  localSave();
  alert('برگشت به پیش‌فرض انجام شد.');
};

document.getElementById('startBtn').onclick = ()=>{
  if(players.length===0){ alert('ابتدا بازیکن وارد کنید'); return; }
  curRound = 1; turnIndex = 0;
  document.getElementById('startBtn').style.display='none';
  document.getElementById('nextBtn').style.display='inline-block';
  document.getElementById('endBtn').style.display='inline-block';
  nextTurn();
};

document.getElementById('nextBtn').onclick = nextTurn;
document.getElementById('endBtn').onclick = endGame;
document.getElementById('didBtn').onclick = ()=>{
  const p = players[turnIndex];
  scores[p] = (scores[p]||0) + 1;
  renderScores();
  document.getElementById('currentText').textContent = `${p} امتیاز گرفت!`;
  // بعد از ثبت نتیجه، آماده چالش بعدی
};
document.getElementById('failBtn').onclick = ()=>{
  document.getElementById('currentText').textContent = `${players[turnIndex]} این چالش را انجام نداد.`;
};
document.getElementById('speakBtn').onclick = ()=>{
  speak(document.getElementById('currentText').textContent || 'هیچ متنی برای گفتن نیست');
};

/* ==== منطق بازی ==== */
function nextTurn(){
  // بستن صحبت‌های قبلی
  speechSynthesis.cancel();

  if(curRound > rounds){ endGame(); return; }
  const p = players[turnIndex];
  const chal = rand(challenges);
  document.getElementById('currentText').textContent = `راند ${curRound} — نوبت ${p}: ${chal}`;
  document.getElementById('status').textContent = `راند ${curRound} از ${rounds}`;
  document.getElementById('didBtn').style.display='inline-block';
  document.getElementById('failBtn').style.display='inline-block';
  document.getElementById('speakBtn').style.display='inline-block';
  // هر بار که به next می‌زنیم، نوبت بعدی را تنظیم کن
  turnIndex++;
  if(turnIndex >= players.length){
    turnIndex = 0;
    curRound++;
  }
}

function endGame(){
  // تعیین بازنده: کمترین امتیاز
  const min = Math.min(...Object.values(scores));
  const losers = Object.keys(scores).filter(k=>scores[k]===min);
  const punish = rand(punishments);
  let resultText = '';
  if(losers.length===1){
    resultText = `بازنده: ${losers[0]}. تنبیه: ${punish}`;
  } else {
    resultText = `تساوی بین: ${losers.join(' و ')}. تنبیه مشترک: ${punish}`;
  }
  document.getElementById('currentText').textContent = resultText;
  document.getElementById('status').textContent = 'بازی تمام شد';
  document.getElementById('nextBtn').style.display='none';
  document.getElementById('endBtn').style.display='none';
  document.getElementById('startBtn').style.display='inline-block';
  document.getElementById('didBtn').style.display='none';
  document.getElementById('failBtn').style.display='none';
  document.getElementById('speakBtn').style.display='inline-block';
  speak(resultText);
  localSave();
}

/* ==== localStorage ==== */
function localSave(){
  localStorage.setItem('kb_ch', JSON.stringify(challenges));
  localStorage.setItem('kb_p', JSON.stringify(punishments));
  localStorage.setItem('kb_players', JSON.stringify(players));
  localStorage.setItem('kb_scores', JSON.stringify(scores));
  localStorage.setItem('kb_rounds', rounds);
}
function localLoad(){
  try{
    const ch = JSON.parse(localStorage.getItem('kb_ch')||'null');
    const p = JSON.parse(localStorage.getItem('kb_p')||'null');
    const pl = JSON.parse(localStorage.getItem('kb_players')||'null');
    const sc = JSON.parse(localStorage.getItem('kb_scores')||'null');
    const rd = parseInt(localStorage.getItem('kb_rounds')||'3');
    challenges = (ch && ch.length)? ch : DEFAULT_CHALLENGES.slice();
    punishments = (p && p.length)? p : DEFAULT_PUNISHMENTS.slice();
    players = (pl && pl.length)? pl : [];
    scores = sc || {};
    rounds = rd || 3;
  }catch(e){
    challenges = DEFAULT_CHALLENGES.slice();
    punishments = DEFAULT_PUNISHMENTS.slice();
    players = [];
    scores = {};
    rounds = 3;
  }
}
localLoad();
renderLists();
renderPlayers();
renderScores();

/* ==== voice list ==== */
function populateVoices(){
  const sel = document.getElementById('voiceSelect');
  sel.innerHTML = '<option value="">(پیش‌فرض سیستم)</option>';
  const vlist = speechSynthesis.getVoices();
  vlist.forEach((v,i)=>{
    const o = document.createElement('option');
    o.value = i;
    o.textContent = `${v.name} — ${v.lang}`;
    sel.appendChild(o);
  });
  sel.onchange = ()=>{
    const idx = sel.value;
    if(idx===''){ voice = null; return; }
    const vlist = speechSynthesis.getVoices();
    voice = vlist[parseInt(idx)] || null;
  };
}
if('speechSynthesis' in window){
  populateVoices();
  speechSynthesis.onvoiceschanged = populateVoices;
}
</script>
</body>
</html>